server:
  port: 8085
spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    # 参数配置，显示sql
    props:
      sql:
        show: true
    # 配置数据源
    datasource:
      # 给每个数据源取别名，下面的ds1,ds1任意取名字
      names: ds0,ds1
      # 给master-ds1每个数据源配置数据库连接信息
      ds0:
        # 配置druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.129:3306/sharding?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
        username: root
        password: 123456
        maxPoolSize: 100
        minPoolSize: 5
      # 配置ds1-slave
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.2.129:33061/sharding?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
        username: root
        password: 123456
        maxPoolSize: 100
        minPoolSize: 5
    # 配置默认数据源ds0
    sharding:
      master-slave-rules:
        # 配置主从名称，可以任意取名字
        ms:
          # 配置主库master，负责数据的写入
          master-data-source-name: ds0
          # 配置从库slave节点，多个从节点以逗号分隔
          slave-data-source-names: ds1
          # 配置slave节点的负载均衡均衡策略，采用轮询机制
          load-balance-algorithm-type: round_robin
      # 默认数据源，主要用于写，注意一定要配置读写分离 ,注意：如果不配置，那么就会把三个节点都当做从slave节点，新增，修改和删除会出错。
      default-data-source-name: ms
      # 配置分表的规则
#      tables:
#        # ksd_user 逻辑表名
#        ksd_user:
#          # 数据节点：数据源$->{0..N}.逻辑表名$->{0..N}
#          actual-data-nodes: ms.ksd_user$->{0..1}
##          # 拆分库策略，也就是什么样子的数据放入放到哪个数据库中。
##          database-strategy:
##            standard:
##              shardingColumn: birthday
##              preciseAlgorithmClassName: com.sharding.jdbc.demo.service.BirthdayAlgorithm
#          table-strategy:
#            inline:
#              sharding-column: age    # 分片字段（分片键）
#              algorithm-expression: ksd_user$->{age % 2} # 分片算法表达式
#        user_order:
#          # 数据节点：数据源$->{0..N}.逻辑表名$->{0..N}
#          actual-data-nodes: ms.user_order_$->{2021..2022}${(1..3).collect{t ->t.toString().padLeft(2,'0')} }
#          key-generator:
#            column: order_id
#            type: SNOWFLAKE
#          table-strategy:
#            standard:
#              shardingColumn: yearmonth
#              preciseAlgorithmClassName: com.sharding.jdbc.demo.service.YearMonthShardingAlgorithm

# 整合mybatis的配置XXXXX
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.sharding.jdbc.demo.entity